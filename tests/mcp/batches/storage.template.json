{
  "metadata": {
    "name": "mini-translate-storage-snapshot",
    "description": "Capture chrome.storage local and session state via QA hooks"
  },
  "setup": {
    "notes": [
      "Requires QA build with chrome.storage instrumentation enabled"
    ]
  },
  "steps": [
    {
      "tool": "new_page",
      "params": {
        "url": "chrome-extension://<EXTENSION_ID_PLACEHOLDER>/options.html?qa=1"
      }
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { const read = (api) => new Promise((resolve, reject) => { api.get(null, (data) => { const err = chrome.runtime?.lastError; if (err) { reject(err.message); return; } resolve(data); }); }); const local = await read(chrome.storage.local); const session = chrome.storage.session ? await read(chrome.storage.session) : {}; return JSON.stringify({ ok: true, local, session }, null, 2); }",
        "saveAs": "@artifact/options/storage-after-save.json"
      }
    },
    {
      "tool": "navigate_page",
      "params": {
        "url": "https://example.com/"
      }
    },
    {
      "tool": "wait_for",
      "params": {
        "text": "Example Domain"
      }
    },
    {
      "tool": "navigate_page",
      "params": {
        "url": "chrome-extension://<EXTENSION_ID_PLACEHOLDER>/options.html?qa=1"
      }
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { const read = (api) => new Promise((resolve, reject) => { api.get(null, (data) => { const err = chrome.runtime?.lastError; if (err) { reject(err.message); return; } resolve(data); }); }); const local = await read(chrome.storage.local); const session = chrome.storage.session ? await read(chrome.storage.session) : {}; return JSON.stringify({ ok: true, local, session }, null, 2); }",
        "saveAs": "@artifact/context-menu/storage-after-page.json"
      }
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { if (window.__miniTranslateQA) { const result = await window.__miniTranslateQA.resetWorker(); return { ok: true, resetResult: result, timestamp: new Date().toISOString() }; } return { error: 'QA API not available' }; }",
        "saveAs": "@artifact/qa/service-worker-reset.json"
      },
      "notes": "Test Service Worker restart via QA_RESET_WORKER message"
    },
    {
      "tool": "wait_for",
      "params": {
        "time": 2000
      },
      "notes": "Wait for Service Worker to restart and reinitialize"
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { const read = (api) => new Promise((resolve, reject) => { api.get(null, (data) => { const err = chrome.runtime?.lastError; if (err) { reject(err.message); return; } resolve(data); }); }); const local = await read(chrome.storage.local); const session = chrome.storage.session ? await read(chrome.storage.session) : {}; return JSON.stringify({ ok: true, local, session, afterReset: true }, null, 2); }",
        "saveAs": "@artifact/qa/storage-after-reset.json"
      },
      "notes": "Verify storage state after Service Worker restart"
    }
  ]
}
