{
  "metadata": {
    "name": "mini-translate-smoke",
    "description": "Core smoke flow for Mini Translate extension using chrome-devtools-mcp"
  },
  "setup": {
    "notes": [
      "Ensure Chrome with remote debugging is running on http://127.0.0.1:9222 and the dist/ extension is loaded",
      "Start MCP server: npx chrome-devtools-mcp --browserUrl http://127.0.0.1:9222"
    ]
  },
  "steps": [
    {
      "tool": "new_page",
      "params": {
        "url": "chrome-extension://<EXTENSION_ID_PLACEHOLDER>/options.html"
      }
    },
    {
      "tool": "take_snapshot",
      "params": {
        "path": "@artifact/options/options-before.dom.json"
      },
      "notes": "Capture DOM snapshot for baseline"
    },
    {
      "tool": "fill",
      "params": {
        "uid": "@uid:options.model-select",
        "value": "gpt-4o-mini"
      }
    },
    {
      "tool": "fill",
      "params": {
        "uid": "@uid:options.api-base",
        "value": "stub://translator/success"
      }
    },
    {
      "tool": "fill",
      "params": {
        "uid": "@uid:options.api-key",
        "value": "qa-local-key"
      }
    },
    {
      "tool": "click",
      "params": {
        "uid": "@uid:options.save"
      }
    },
    {
      "tool": "wait_for",
      "params": {
        "text": "已保存"
      }
    },
    {
      "tool": "upload_file",
      "params": {
        "uid": "@uid:options.import-json",
        "filePath": "@project/tests/mcp/data/sample-vocab.json"
      }
    },
    {
      "tool": "wait_for",
      "params": {
        "text": "导入完成"
      }
    },
    {
      "tool": "take_snapshot",
      "params": {
        "path": "@artifact/options/options-after-import.dom.json"
      },
      "notes": "Verify table updates and pagination"
    },
    {
      "tool": "navigate_page",
      "params": {
        "url": "https://example.com"
      }
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "() => { window.getSelection().selectAllChildren(document.body); }"
      }
    },
    {
      "tool": "take_screenshot",
      "params": {
        "path": "@artifact/context-menu/example-domain-after.png"
      }
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { if (window.__miniTranslateQA) { return await window.__miniTranslateQA.applyTerm('test-term', '测试词条', null); } return { error: 'QA API not available' }; }",
        "saveAs": "@artifact/qa/qa-apply-term-result.json"
      },
      "notes": "Test QA_APPLY_TERM message via window.__miniTranslateQA API"
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { if (window.__miniTranslateQA) { return await window.__miniTranslateQA.queryTerm('test-term', null); } return { error: 'QA API not available' }; }",
        "saveAs": "@artifact/qa/qa-query-term-result.json"
      },
      "notes": "Test QA_QUERY_TERM message to verify term state"
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { if (window.__miniTranslateQA) { return await window.__miniTranslateQA.removeTerm('test-term', null); } return { error: 'QA API not available' }; }",
        "saveAs": "@artifact/qa/qa-remove-term-result.json"
      },
      "notes": "Test QA_REMOVE_TERM message to remove term"
    },
    {
      "tool": "evaluate_script",
      "params": {
        "function": "async () => { if (window.__miniTranslateQA) { return await window.__miniTranslateQA.resetWorker(); } return { error: 'QA API not available' }; }",
        "saveAs": "@artifact/qa/qa-reset-worker-result.json"
      },
      "notes": "Test QA_RESET_WORKER message to restart Service Worker"
    }
  ],
  "teardown": {
    "notes": [
      "Close extra tabs created during the run if necessary"
    ]
  }
}
