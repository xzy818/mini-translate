name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feat/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 静态代码检查
  lint:
    name: ESLint Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint (with reports)
        run: npm run lint:ci || true
        
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            eslint-report.json
            eslint-report.html

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '21']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test
        
      - name: Generate coverage report
        run: npm run test:coverage
        continue-on-error: true
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml

  # 集成测试
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true
        
      - name: Validate manifest
        run: node scripts/validate-manifest.js
        continue-on-error: true

  # 构建验证
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        continue-on-error: true
        
      - name: Validate build output
        run: |
          if [ -d "dist" ]; then
            echo "Build output exists"
            ls -la dist/
          else
            echo "No build output found"
          fi

  # 质量门禁
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, integration, build]
    if: always()
    steps:
      - name: Check lint results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint check failed"
            exit 1
          fi
          echo "✅ Lint check passed"
          
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          echo "✅ Unit tests passed"
          
      - name: Check integration results
        run: |
          if [ "${{ needs.integration.result }}" != "success" ]; then
            echo "⚠️ Integration tests had issues (non-blocking)"
          else
            echo "✅ Integration tests passed"
          fi
          
      - name: Check build results
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "⚠️ Build had issues (non-blocking)"
          else
            echo "✅ Build verification passed"
          fi
          
      - name: Quality Gate Summary
        run: |
          echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.lint.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration.result == 'success' && '✅ Pass' || '⚠️ Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Pass' || '⚠️ Issues' }} |" >> $GITHUB_STEP_SUMMARY
